generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model activity_log {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activity      String   @db.VarChar(255)
  user_id       String   @db.Uuid
  team_id       String   @db.Uuid
  project_id    String   @db.Uuid
  task_id       String   @db.Uuid
  comment_id    String   @db.Uuid
  activity_type String?  @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  comment       comment  @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project       project  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task          task     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team          team     @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model comment {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content        String         @db.VarChar(255)
  user_id        String         @db.Uuid
  task_id        String         @db.Uuid
  comment_status String?        @db.VarChar(255)
  likes          Int?
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime       @default(now()) @db.Timestamp(6)
  activity_log   activity_log[]
  task           task           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String         @db.VarChar(255)
  description    String?        @db.VarChar(255)
  user_id        String         @db.Uuid
  team_id        String         @db.Uuid
  project_status String?        @db.VarChar(255)
  deadline       DateTime?      @db.Timestamp(6)
  created_at     DateTime       @default(now()) @db.Timestamp(6)
  updated_at     DateTime       @default(now()) @db.Timestamp(6)
  activity_log   activity_log[]
  team           team           @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task           task[]
}

model task {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar(255)
  description  String?        @db.VarChar(255)
  user_id      String         @db.Uuid
  project_id   String         @db.Uuid
  task_status  String?        @db.VarChar(255)
  due_date     DateTime?      @db.Timestamp(6)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  activity_log activity_log[]
  comment      comment[]
  project      project        @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?        @db.VarChar(255)
  team_size    Int?
  team_status  String?        @db.VarChar(255)
  name         String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  user_id      String         @db.Uuid
  tenant_id    String         @db.VarChar(255)
  activity_log activity_log[]
  project      project[]
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  activity_log activity_log[]
  comment      comment[]
  project      project[]
  task         task[]
  team         team[]
}
